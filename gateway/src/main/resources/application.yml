server:
  port: 8080

eureka:
  client:
    service-url:
      defaultZone: http://test:test@localhost:8010/eureka
  instance:
    prefer-ip-address: true

spring:
  application:
    name: gateway

  ### we need to configure the routing of the requests which will come to the Gateway, to the microservices

  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS

      discovery:
        # automatic routing of gateway routes (enabled: true) ->  /microserviceName/RequestMappingOfSpecificController
        # allows the Gateway, to locate the microservices, by using their application.name => not as clean as manually configuring routing, bcs we have to include microservice name in the URL
        locator:
          enabled: false
          lower-case-service-id: true

      ### manually configuring the routing

      routes:
        # describes the endpoint
      - id: users-status-check
        # since the ports are random, I use the lb = load balancer of eureka. this way we can automatically get the port at which the microservice is running
        uri: lb://users-ws
        ## predicates are like if conditions. routing will be done only if true
        # only if request URL path matches, it will be routed successfully
        predicates:
        - Path=/users-ws/users/status/check
        - Method=GET
        # request must have the Authorization header. The second param is the value of this header, and in this case we can write it as a regex (the value must start with Bearer)
        - Header=Authorization, Bearer (.*)
        ## can also apply filters
        filters:
        # this filter removes the cookies, if request has any. bcs we use JWT. THis is built-in method. we can also have custom filters
        - RemoveRequestHeader=Cookie
        # use the custom class as a filter. when requests are made, this filter logic will be applied.
        # will check if jwt token was signed with correct secret key
        - AuthorizationHeaderFilter
        # another useful filter is: RewritePath=pathOfRequestWhichIWantToTransform, transformedPath
        - RewritePath=/users-ws/(?<segment>.*), /$\{segment}  # so if incoming request in the Gateway is: /users-ws/users/status/check, this will be
                                                              # transformed internally in our backend and the rest controllers of this microservice will get
                                                              # this request path: /users/status/check

      # register - no need for header auth or filters for jwt
      - id: users-ws-register
        uri: lb://users-ws
        predicates:
        - Path=/users-ws/users
        - Method=POST
        filters:
        - RemoveRequestHeader=Cookie
        - RewritePath=/users-ws/(?<segment>.*), /$\{segment}

      # login - no need for header auth or filters for jwt
      - id: users-ws-login
        uri: lb://users-ws
        predicates:
        - Path=/users-ws/users/login
        - Method=POST
        filters:
        - RemoveRequestHeader=Cookie
        - RewritePath=/users-ws/(?<segment>.*), /$\{segment}

      # logout - expires refresh token
      - id: users-ws-logout
        uri: lb://users-ws
        predicates:
          - Path=/users-ws/users/logout
          - Method=POST
          - Header=Authorization, Bearer (.*)
        filters:
          - RemoveRequestHeader=Cookie
          - AuthorizationHeaderFilter
          - RewritePath=/users-ws/(?<segment>.*), /$\{segment}

      # TODO: refresh token  refresh-token
      # refresh token - no need for header auth or filters for jwt
      - id: users-ws-refresh-token
        uri: lb://users-ws
        predicates:
          - Path=/users-ws/users/refresh-token
          - Method=POST
        filters:
          - RemoveRequestHeader=Cookie
          - RewritePath=/users-ws/(?<segment>.*), /$\{segment}

      # get, update users
      - id: users-ws-get-update
        uri: lb://users-ws
        predicates:
        - Path=/users-ws/users/**
        - Method=GET,PUT
        # request must have a Bearer token header
        - Header=Authorization, Bearer (.*)
        filters:
        - RemoveRequestHeader=Cookie
        # will check if jwt token was signed with correct secret key
        - AuthorizationHeaderFilter
        - RewritePath=/users-ws/(?<segment>.*), /$\{segment}

      # actuator for users-microservice
      - id: users-ws-actuator
        uri: lb://users-ws
        predicates:
        - Path=/users-ws/actuator
        - Method=GET
        filters:
        - RemoveRequestHeader=Cookie
        - RewritePath=/users-ws/(?<segment>.*), /$\{segment}

      # status check for posts microservice
      - id: posts-status-check
        uri: lb://posts-ws
        predicates:
          - Path=/posts-ws/posts/status/check
          - Method=GET
          - Header=Authorization, Bearer (.*)
        filters:
          - RemoveRequestHeader=Cookie
          - AuthorizationHeaderFilter
          - RewritePath=/posts-ws/(?<segment>.*), /$\{segment}

      # actuator for posts-microservice
      - id: posts-ws-actuator
        uri: lb://posts-ws
        predicates:
          - Path=/posts-ws/actuator
          - Method=GET
        filters:
          - RemoveRequestHeader=Cookie
          - RewritePath=/posts-ws/(?<segment>.*), /$\{segment}

      # get posts of the connections of the user (feed)
      - id: posts-ws-feed-posts
        uri: lb://posts-ws
        predicates:
          - Path=/posts-ws/posts
          - Method=GET
          - Header=Authorization, Bearer (.*)
        filters:
          - RemoveRequestHeader=Cookie
          - AuthorizationHeaderFilter
          - RewritePath=/posts-ws/(?<segment>.*), /$\{segment}

      # get posts of a certain user
      - id: posts-ws-feed-posts
        uri: lb://posts-ws
        predicates:
          - Path=/posts-ws/users/{userId:\d+}/posts
          - Method=GET
          - Header=Authorization, Bearer (.*)
        filters:
          - RemoveRequestHeader=Cookie
          - AuthorizationHeaderFilter
          - RewritePath=/posts-ws/(?<segment>.*), /$\{segment}

      # add new post
      - id: posts-ws-feed-posts
        uri: lb://posts-ws
        predicates:
          - Path=/posts-ws/posts
          - Method=POST
          - Header=Authorization, Bearer (.*)
        filters:
          - RemoveRequestHeader=Cookie
          - AuthorizationHeaderFilter
          - RewritePath=/posts-ws/(?<segment>.*), /$\{segment}

      # different actions on a certain post (like, get comments, add comment)
      - id: posts-ws-feed-posts
        uri: lb://posts-ws
        predicates:
          - Path=/posts-ws/posts/{postId:\d+}/**
          - Method=GET,POST,PATCH
          - Header=Authorization, Bearer (.*)
        filters:
          - RemoveRequestHeader=Cookie
          - AuthorizationHeaderFilter
          - RewritePath=/posts-ws/(?<segment>.*), /$\{segment}

      # OPENAPI 3
      # somewhat of a workaround to group the endpoint documentation of each ms separately
      - id: openapi
        uri: http://localhost:${server.port}
        predicates:
          - Path=/v3/api-docs/**
        filters:
          - RewritePath=/v3/api-docs/(?<path>.*), /$\{path}/v3/api-docs
      - id: users-ws
        uri: lb://users-ws
        predicates:
          - Path=/users-ws/**
        filters:
          - RewritePath=/users-ws/(?<path>.*), /$\{path}
      - id: posts-ws
        uri: lb://posts-ws
        predicates:
          - Path=/posts-ws/**
        filters:
          - RewritePath=/posts-ws/(?<path>.*), /$\{path}


  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

  devtools:
    restart:
      quiet-period: 2000
      poll-interval: 3000

## Using the Actuator dependency in the gateway, I can expose different endpoints of it, to the client.
# some endpoints are enabled by default, for others I have to enable them like below. exposes the beans of the app, health, routes that are configured
management:
  endpoints:
    web:
      exposure:
        include: beans, health, routes, httptrace


token:
  secret: urg4897hrk309k99c35vgj45vh8eufk34

# OPENAPI 3
springdoc:
  swagger-ui:
    urls:
      # each microservice will genereate the documentation, however it will only be 'read' by the gateway. the generated docs from each ms will be exposed in /v3/api-docs/{microservice-name}
      - name: users
        url: /v3/api-docs/users-ws
      - name: posts
        url: /v3/api-docs/posts-ws
  cache:
    disabled: true
